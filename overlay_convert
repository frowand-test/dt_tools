#!/usr/bin/perl

# Copyright 2016  Frank Rowand  frowand.list@gmail.com
# Copyright 2017  Frank Rowand  frowand.list@gmail.com
#
# license: GPL V2
# This file is subject to the terms and conditions of the GNU General Public
# License v2.
#
# Convert overlay dts file from hand-coded expanded form to new syntactic
# sugar form.
#
# This removes the explicit fragment@ nodes and converts the __overlay__
# nodes to nodes named with pointers to label.
#
# The __overlay__ and fragment@ nodes will be created by dtc.
#
# This program uses heuristics to try to handle the most common overlay
# formats.
#
# This program has only been tested on a small number of overlay dts files
# and should be considered a work in progress.


# zzz TODO:
#  - May need to update the "/plugin/" declaration if dtc changes.


use strict 'refs';
use strict subs;

use Getopt::Long;

$VUFX = "170122a";

$script_name = $0;
$script_name =~ s|^.*/||;


sub usage()
{
	print STDERR
"
Usage: $script_name [options] DTS

   Convert overlay dts file from hand-coded expanded form to new syntactic
   sugar form.  Further manual modifications will be required to convert
   to the connector model if DTS does not use the connector model.

   Node names __symbols__, __fixups__, and __local_fixups__ are not allowed.
   Their presence suggests that DTS has been compiled into a .dtbo and then
   de-compiled.  This is not the preferred form of source since phandle
   references are not of the form: &label.

Valid options:

    -h                 Synonym for  --help
   --force             Try to produce output even if errors exist
   --help              Display this message
   --no-indent-fix     remove extra leading tabs
   --verbose           Print more information
   --version           Display program version and exit


Limitations:

   A fragment 'target' value that does not resolve to a label on a connector
   node will not be detected as a WARNING.


Exit status:

    0  no error
    1  error processing command line
    2  unable to open or read DTS
    3  one or more WARNINGs
         - 'fragment' node with 'target-path' property
         - property in the root node (will not be detected if in a fragment
           with target-path of root

   10  one or more ERRORs from the following list and --force enabled
   11  DTS contains a node name other than __overlay__, with leading '_'
   12  DTS contains a fragment node with no target property

";
}


# -----------------------------------------------------------------------------
# program entry point

Getopt::Long::Configure("no_ignore_case", "bundling");

if (!GetOptions(
	"h"              => \$help,
	"force"          => \$force,
	"help"           => \$help,
	"no-indent-fix"  => \$no_indent_fix,
	"version"        => \$version,
	"verbose"        => \$verbose,
	)) {

	exit 1;
}

if ($version) {
	print STDERR "\n$script_name  $VUFX\n";
	exit 0;
}

if ($help) {
	&usage;
	exit 0;
}


$errors          = 0;
$root_properties = 0;
$warnings        = 0;


# ----- scan DTS

$node_depth = 0;

LINE:
while ($line = <ARGV>) {

	# ----- start of node

	if ($line =~ /{/) {
		$node_depth++;
		$node_name = $line;
		chomp $node_name;
		$indent = $node_name;
		$indent =~ s/\S.*//;
		$indent =~ s/^\t\t// if (! $no_indent_fix);
		$node_name =~ s/^\s*//;
		$node_name =~ s/\s*{.*//;

		$in_fragment = 0;

		# For properties in the root node.
		if (($node_depth == 2) && $in_root) {
			$in_root = 0;
			print "};\n";
			print "\n";
		}

		if (($node_depth == 2) && ($node_name =~ /^fragment@\d*$/)) {
			$in_fragment = 1;
			$fragment_name = $node_name;
			push @fragment_depth, $node_depth;
		} elsif ($node_name =~ /^__overlay__$/) {
			if ($save_target) {
				print "$indent$save_target {\n";
				undef $save_target;
			} elsif ($save_target_path) {
				print "$indent$save_target_path {\n";
				undef $save_target_path;
			} else {
				print STDERR "ERROR: line $.: no 'target' property in node ${fragment_name}\n";
				if ($force) {
					$errors++;
					print "ERROR: no 'target' property in node ${fragment_name}\n";
					print "       Node name '__overlay__' not converted to '&label' form:\n";
					$line =~ s/\t\t// if (! $no_indent_fix && ($node_depth > 1));
					print "$line";
				} else {
					exit 12;
				}
			}
		} elsif ($node_name =~ /^_/) {
			$errors++;
			# might be __symbols__, __fixups__, or __local_fixups__
			print STDERR "\nERROR: line $.: illegal node name: $node_name\n\n";
			exit 11 if (! $force);
		} elsif ($node_depth > 1) {
			print "$indent$node_name {\n";
		}

		next LINE;
	}


	# ----- end of node

	if ($line =~ /}/) {

		$indent = $line;
		chomp $indent;
		$indent =~ s/\S.*//;
		$indent =~ s/^\t\t// if (! $no_indent_fix);

		$fragment_depth = pop @fragment_depth;
		if (($node_depth > 2) && ($fragment_depth != $node_depth)) {
			push @fragment_depth, $fragment_depth;
			$line =~ s/\t\t// if (! $no_indent_fix);
			print "$line";
		}

		$node_depth--;

		next LINE;
	}


	# ----- anything else

	if ($in_fragment && ($line =~ /target\s*=\s*</)) {
		$save_target = $line;
		chomp $save_target;
		$save_target =~ s/.*<\s*//;
		$save_target =~ s/\s*>.*//;
	} elsif ($in_fragment && ($line =~ /target-path\s*=\s*"/)) {
		$save_target_path = $line;
		chomp $save_target_path;
		$save_target_path =~ s/.*?"\s*//;
		$save_target_path =~ s/\s*".*//;
		$warnings++;
		print STDERR "WARNING: line $.: 'target-path' not supported by Linux\n";
	} elsif (!$in_fragment) {

		# This will _not_ detect properties in fragments with
		# 'target-path' of root.
		# That is ok, the invalid property 'target-path' will result
		# in a warning.
		if (($node_depth == 1) && ($line =~ /^\s*[0-9a-zA-Z,._+-?#*]+.*=/)) {
			if (! $in_root) {
				$in_root = 1;
				print "/ {\n";
			}
			$root_properties++;
			if ($verbose) {
				$warnings++;
				print STDERR "WARNING: line $.: property in the root node\n";
			} elsif ($root_properties == 1) {
				$warnings++;
				print STDERR "WARNING: line $.: first property in the root node\n";
			}
		}

		$line =~ s/\t\t// if (! $no_indent_fix && ($node_depth > 1));
		print "$line";
	}

	next LINE;

}

if ($verbose) {
	print STDERR "\n";
	print STDERR "Summary:\n";

	if ($errors == 1) {
		print STDERR "   $errors ERROR\n";
	} else {
		print STDERR "   $errors ERRORS\n";
	}

	if ($warnings == 1) {
		print STDERR "   $warnings WARNING\n";
	} else {
		print STDERR "   $warnings WARNINGS\n";
	}

	if ($root_properties == 1) {
		print STDERR "   $root_properties property in the root node\n";
	} else {
		print STDERR "   $root_properties properties in the root node\n";
	}

	print STDERR "\n";
}


if ($errors) {

	exit 10;

} elsif ($warnings) {

	exit 3;

}
